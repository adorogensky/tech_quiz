#!/usr/bin/python
import sqlite3
import random
from datetime import datetime

def update_answer_stats(conn, row, answer, is_correct):
    conn.execute(
        "insert into answer_stats (question_id, answer, correct_answer, timestamp) values (?,?,?,?)",
        [row['id'], answer, is_correct, datetime.now()]
    )
    conn.commit()

def query_not_answered_questions(cursor):
    cursor.execute("select * from question_answer where id not in (select distinct question_id from answer_stats)")
    questions = cursor.fetchall()
    random.shuffle(questions)

    return questions

def query_last_incorrectly_answered_questions(cursor):
    cursor.execute(
        """
        select * from question_answer join (
            select question_id, max(timestamp) as timestamp
            from answer_stats
            group by question_id
            having correct_answer = 0
        ) as latest_incorrect_answers
        on id = latest_incorrect_answers.question_id
        """
    )

    questions = cursor.fetchall()
    random.shuffle(questions)
    return questions

def query_last_correctly_answered_questions(cursor, min_hours_since_last_correct_answer = 72):
    cursor.execute(
            """
            select * from question_answer join (
               select question_id,
               min(
                 (
                   strftime('%s', CURRENT_TIMESTAMP) -
                   strftime('%s', timestamp)
                 ) / 3600
               ) as hours_since_last_correct_answer
               from answer_stats
               group by question_id
               having correct_answer = 1
               and hours_since_last_correct_answer >= ?
            ) as correct_answers_in_last_hours
            on id = correct_answers_in_last_hours.question_id
            """,
            [min_hours_since_last_correct_answer]
    )
    questions = cursor.fetchall()
    random.shuffle(questions)
    return questions

conn = sqlite3.connect('tq.db')
conn.row_factory = sqlite3.Row
cursor = conn.cursor()

questions = query_not_answered_questions(cursor)
questions.extend(query_last_incorrectly_answered_questions(cursor))
questions.extend(query_last_correctly_answered_questions(cursor))

for row in questions:
    print("Question: ", row["question"])
    answer = input("Answer: ")
    if (answer == row["answer"]):
        print("Correct!")
        update_answer_stats(conn, row, answer, 1)
    else:
        print("Incorrect")
        update_answer_stats(conn, row, answer, 0)

conn.close()
