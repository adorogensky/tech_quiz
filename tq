#!/usr/bin/python
import sqlite3
import random
import sys
from datetime import datetime

def update_metrics(conn, row, answer, is_correct):
    conn.execute(
        "insert into metrics (question_id, answer, correct_answer, answered_at) values (?,?,?,?)",
        [row['id'], answer, is_correct, datetime.now()]
    )
    conn.commit()

def query_not_answered_questions(cursor):
    cursor.execute("select * from question where id not in (select distinct question_id from metrics)")
    questions = cursor.fetchall()
    random.shuffle(questions)

    return questions

def query_last_incorrectly_answered_questions(cursor):
    cursor.execute(
        """
        select * from question join (
            select question_id, max(answered_at) as answered_at
            from metrics
            group by question_id
            having correct_answer = 0
        ) as latest_incorrect_answers
        on id = latest_incorrect_answers.question_id
        """
    )

    questions = cursor.fetchall()
    random.shuffle(questions)
    return questions

def query_last_correctly_answered_questions(cursor, min_hours_since_last_correct_answer = 72):
    cursor.execute(
            """
            select * from question join (
               select question_id,
               min(
                 (
                   strftime('%s', CURRENT_TIMESTAMP) -
                   strftime('%s', answered_at)
                 ) / 3600
               ) as hours_since_last_correct_answer
               from metrics
               group by question_id
               having correct_answer = 1
               and hours_since_last_correct_answer >= ?
            ) as correct_answers_in_last_hours
            on id = correct_answers_in_last_hours.question_id
            """,
            [min_hours_since_last_correct_answer]
    )
    questions = cursor.fetchall()
    random.shuffle(questions)
    return questions

def query_answers_by_question(question_id):
    cursor.execute("select * from answer where question_id = ?", [question_id])
    return cursor.fetchall()

def verify_answer_correct(cursor, question_id, answer):
    correct_answers = query_answers_by_question(question_id)
    return filter(lambda correct_answer: correct_answer["text"].rstrip() == answer.rstrip(), correct_answers)

conn = sqlite3.connect('tq.db')
conn.row_factory = sqlite3.Row
cursor = conn.cursor()

questions = query_not_answered_questions(cursor)
questions.extend(query_last_incorrectly_answered_questions(cursor))
questions.extend(query_last_correctly_answered_questions(cursor))

while questions:
    for question in questions[:]:
        print("Question: ", question["text"])

        while True:
            answer = sys.stdin.read()
            if answer:
                break

        if verify_answer_correct(cursor, question["id"], answer):
            print("Correct!")
            questions.remove(question)
            update_metrics(conn, question, answer, 1)
        else:
            print("Incorrect")
            update_metrics(conn, question, answer, 0)

conn.close()
